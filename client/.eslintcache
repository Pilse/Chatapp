[{"/Users/pilse/Documents/Study_log/chat/client/src/index.js":"1","/Users/pilse/Documents/Study_log/chat/client/src/components/App.jsx":"2","/Users/pilse/Documents/Study_log/chat/client/src/components/Login.jsx":"3","/Users/pilse/Documents/Study_log/chat/client/src/components/Header.jsx":"4","/Users/pilse/Documents/Study_log/chat/client/src/components/Rooms.jsx":"5","/Users/pilse/Documents/Study_log/chat/client/src/components/Chat.jsx":"6","/Users/pilse/Documents/Study_log/chat/client/src/components/Room.jsx":"7","/Users/pilse/Documents/Study_log/chat/client/src/components/Messages.jsx":"8"},{"size":157,"mtime":1612167934430,"results":"9","hashOfConfig":"10"},{"size":543,"mtime":1612926347777,"results":"11","hashOfConfig":"10"},{"size":77,"mtime":1612488426611,"results":"12","hashOfConfig":"10"},{"size":159,"mtime":1612860937634,"results":"13","hashOfConfig":"10"},{"size":1371,"mtime":1613374278607,"results":"14","hashOfConfig":"10"},{"size":10883,"mtime":1613372060757,"results":"15","hashOfConfig":"10"},{"size":991,"mtime":1612922648530,"results":"16","hashOfConfig":"10"},{"size":885,"mtime":1612922838505,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1x94030",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/pilse/Documents/Study_log/chat/client/src/index.js",[],["37","38"],"/Users/pilse/Documents/Study_log/chat/client/src/components/App.jsx",[],"/Users/pilse/Documents/Study_log/chat/client/src/components/Login.jsx",[],"/Users/pilse/Documents/Study_log/chat/client/src/components/Header.jsx",[],"/Users/pilse/Documents/Study_log/chat/client/src/components/Rooms.jsx",[],"/Users/pilse/Documents/Study_log/chat/client/src/components/Chat.jsx",["39"],"import React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { BsFillChatFill } from \"react-icons/bs\";\nimport Messages from './Messages';\n\nlet socket = '';\nlet ENDPOINT = 'https://papachatdotcom.herokuapp.com/';\nlet nickName = '';\n\nfunction Chat() {\n    if (!nickName) {\n        nickName = prompt('이 방에서 사용하실 이름을 입력해주세요.');\n        if (nickName.trim() === '') {\n            const randomNumber = Math.floor(Math.random() * 10000 + 1);\n            nickName = `이름없음 ${randomNumber}`;\n        }\n    }\n    let { name } = useParams();\n    const time = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n    const [inputMsg, setInputMsg] = useState('');\n    const [outputMessage, setOutputMessage] = useState([]);\n    const [translateState, setTranslateState] = useState(false);\n    const [source, setSource] = useState('');\n    const [target, setTarget] = useState('');\n    const [userNum, setUserNum] = useState('');\n    const Fromfocus = useRef();\n\n    let translateStyle = {\n        backgroundColor: 'white',\n        color: 'red'\n    }\n    \n    if (!translateState)\n        translateStyle.color = '#00adb5';\n\n\n    function handleChange(event) {\n        event.preventDefault();\n        setInputMsg(event.target.value);\n    }\n\n    async function changeTranslatState(event) {\n        await setTranslateState(!translateState);\n        if (translateState === false) {\n            setSource('');\n            setTarget('');\n        }\n        Fromfocus.current.scrollIntoView({behavior:'smooth',block:'end'});\n    }\n\n    async function addMsg() {\n        console.log('addmsg');\n        const msgTime = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n        if (inputMsg === '')\n            return;\n        await socket.emit('message', { translateState, source, target, inputMsg, name, msgTime, nickName }, () => setInputMsg(''));\n    }\n\n    function handleKeypress(event) {\n        if (event.key === 'Enter') {\n            console.log('enter');\n            addMsg();\n        }\n    }\n\n    useEffect(() => {\n        var connectionOptions = {\n            \"force new connection\": true,\n            \"reconnectionAttempts\": \"Infinity\",\n            \"timeout\": 10000,\n            \"transports\": [\"websocket\"]\n        };\n        console.log('enter room');\n        socket = io(ENDPOINT, connectionOptions);\n        socket.emit('join', { name, time, user: 1, nickName });\n\n        return () => {\n            socket.emit('disconnect');\n            socket.off();\n        }\n\n    }, []);\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            console.log('client: msg comes in');\n            setOutputMessage(prevMsg => [...prevMsg, message]);\n            setUserNum(message.usernum);\n        });\n    }, []);\n   \n\n\n    return (\n        <div ref={Fromfocus} id='chat'>\n            <div className='chatContainer'>\n                <div className='chatHeader'>\n                    <div className='chatRoomName'><BsFillChatFill />&nbsp;&nbsp;{name}({userNum})</div>\n                    <a href='/'>\n                        <button>Leave</button>\n                    </a>\n\n                </div>\n                <ScrollToBottom className='chat'>\n                    {outputMessage.map((msg, index) =>\n                        <Messages\n                            key={index}\n                            msg={msg.message}\n                            who={msg.who}\n                            time={msg.time}\n                            username={msg.userName}\n                        />)}\n                </ScrollToBottom>\n            </div>\n            <div className=\"SendMsg\">\n                <input\n                    onChange={handleChange}\n                    onKeyPress={handleKeypress}\n                    type=\"text\" placeholder='Enter messages' value={inputMsg} />\n                <button onClick={addMsg}>Send</button>\n                <button style={translateStyle} className='translate' onClick={changeTranslatState}>{translateState ? '번역끄기' : '번역켜기'}</button>\n            </div>\n            <div className='translateOption'>\n                {translateState ?\n                    <div className='translateFrom'>\n                        <h1 className='tranIndex'>From<span className='indexSpan'>&nbsp;{source}</span></h1>\n                        <button onClick={() => {setSource('ko'); setTarget('')}}>KO</button>\n                        <button onClick={() => {setSource('en'); setTarget('')}}>EN</button>\n                        <button onClick={() => {setSource('ja'); setTarget('')}}>JA</button>\n                        <button onClick={() => {setSource('zh-CN'); setTarget('')}}>zh-CN</button>\n                        <button onClick={() => {setSource('zh-TW'); setTarget('')}}>zh-TW</button>\n                        <button onClick={() => {setSource('vi'); setTarget('')}}>VI</button>\n                        <button onClick={() => {setSource('id'); setTarget('')}}>ID</button>\n                        <button onClick={() => {setSource('th'); setTarget('')}}>TH</button>\n                        <button onClick={() => {setSource('de'); setTarget('')}}>DE</button>\n                        <button onClick={() => {setSource('ru'); setTarget('')}}>RU</button>\n                        <button onClick={() => {setSource('es'); setTarget('')}}>ES</button>\n                        <button onClick={() => {setSource('it'); setTarget('')}}>IT</button>\n                        <button onClick={() => {setSource('fr'); setTarget('')}}>FR</button>\n                    </div>\n                    : null\n                }\n                {translateState && source ?\n                    <div className='translateTo'>\n                        <h1 className='tranIndex'>To<span className='indexSpan'>&nbsp;{target}</span></h1>\n                        {source === 'ko' ?\n                            <div>\n                                <button onClick={() => setTarget('en')}>EN</button>\n                                <button onClick={() => setTarget('ja')}>JA</button>\n                                <button onClick={() => setTarget('zh-CN')}>zh-CN</button>\n                                <button onClick={() => setTarget('zh-TW')}>zh-TW</button>\n                                <button onClick={() => setTarget('vi')}>VI</button>\n                                <button onClick={() => setTarget('id')}>ID</button>\n                                <button onClick={() => setTarget('th')}>TH</button>\n                                <button onClick={() => setTarget('de')}>DE</button>\n                                <button onClick={() => setTarget('ru')}>RU</button>\n                                <button onClick={() => setTarget('es')}>ES</button>\n                                <button onClick={() => setTarget('it')}>IT</button>\n                                <button onClick={() => setTarget('fr')}>FR</button>\n                            </div> : null}\n                        {source === 'en' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                                <button onClick={() => setTarget('ja')}>JA</button>\n                                <button onClick={() => setTarget('zh-CN')}>zh-CN</button>\n                                <button onClick={() => setTarget('zh-TW')}>zh-TW</button>\n                                <button onClick={() => setTarget('fr')}>FR</button>\n                            </div> : null}\n                        {source === 'ja' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                                <button onClick={() => setTarget('en')}>EN</button>\n                                <button onClick={() => setTarget('zh-CN')}>zh-CN</button>\n                                <button onClick={() => setTarget('zh-TW')}>zh-TW</button>\n                            </div> : null}\n                        {source === 'zh-CN' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                                <button onClick={() => setTarget('en')}>EN</button>\n                                <button onClick={() => setTarget('ja')}>JA</button>\n                                <button onClick={() => setTarget('zh-TW')}>zh-TW</button>\n                            </div> : null}\n                        {source === 'zh-TW' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                                <button onClick={() => setTarget('en')}>EN</button>\n                                <button onClick={() => setTarget('ja')}>JA</button>\n                                <button onClick={() => setTarget('zh-CN')}>zh-CN</button>\n                            </div> : null}\n                        {source === 'vi' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                            </div> : null}\n                        {source === 'id' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                            </div> : null}\n                        {source === 'th' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                            </div> : null}\n                        {source === 'de' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                            </div> : null}\n                        {source === 'ru' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                            </div> : null}\n                        {source === 'es' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                            </div> : null}\n                        {source === 'it' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                            </div> : null}\n                        {source === 'fr' ?\n                            <div>\n                                <button onClick={() => setTarget('ko')}>KO</button>\n                                <button onClick={() => setTarget('en')}>EN</button>\n                            </div> : null}\n                    </div> : null}\n            </div>\n        </div>\n    );\n}\n\nexport default Chat;","/Users/pilse/Documents/Study_log/chat/client/src/components/Room.jsx",[],["40","41"],"/Users/pilse/Documents/Study_log/chat/client/src/components/Messages.jsx",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":84,"column":8,"nodeType":"48","endLine":84,"endColumn":10,"suggestions":"49"},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'name' and 'time'. Either include them or remove the dependency array.","ArrayExpression",["54"],["52"],["53"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [name, time]",{"range":"57","text":"58"},[2658,2660],"[name, time]"]